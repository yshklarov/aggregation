#!/usr/bin/env python3
# Generated by Claude AI, 2025-01-02.

import re
import matplotlib.pyplot as plt
import numpy as np

def parse_results(filename):
    sizes = []
    means = []
    stddevs = []
    
    with open(filename, 'r') as f:
        for line in f:
            # Extract grid size (we only need one dimension since it's square)
            size_match = re.search(r'size (\d+)×\d+', line)
            size = int(size_match.group(1))
            
            # Extract mean and stddev
            stats_match = re.search(r'mean±stddev\): \d+, \d+, ([\d.]+) ± ([\d.]+)', line)
            mean_val = float(stats_match.group(1))
            stddev_val = float(stats_match.group(2))
            
            sizes.append(size)
            means.append(mean_val)
            stddevs.append(stddev_val)
    
    return sizes, means, stddevs

def create_plot(sizes, means, stddevs):
    plt.figure(figsize=(10, 6))
    
    # Plot mean values with error bars (1 standard deviation)
    plt.errorbar(sizes, means, 
                yerr=stddevs,
                fmt='o-', capsize=5, capthick=1.0, elinewidth=1.0, markersize=5,
                color='blue')
    
    # Customize the plot
    plt.xlabel('N (Grid is N×N)', fontsize=12)
    plt.xticks(sizes, fontsize=8)
    plt.ylabel('Number of Steps', fontsize=12)
    plt.title('Mean steps to 90% aggregation for 10% density', fontsize=14)
    plt.grid(True, linestyle='--', alpha=0.7)
    
    # Ensure a tight layout
    plt.tight_layout()
    
    # Save the plot
    plt.savefig('results_plot.png', dpi=72, bbox_inches='tight')
    plt.show()

def main():
    # Parse the data
    sizes, means, stddevs = parse_results('results.txt')
    
    # Create and save the plot
    create_plot(sizes, means, stddevs)

if __name__ == "__main__":
    main()
